// Code generated by "esc -o template.go -pkg mkclient client.template"; DO NOT EDIT.

package mkclient

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/client.template": {
		local:   "client.template",
		size:    1887,
		modtime: 1550789001,
		compressed: `
H4sIAAAAAAAC/7RVTW/jNhA9i79i6sNCWgj0Ym9b1AV2nRxatMbWi6bHgKFGNluZckiqjqHovxfDoWQ7
cXoo0FxCzeebeY/0Xum/1AZBNwZtEMLs9q0LkIts9nAM6Gcim1kM8841dNStDfgURus2hD2d9yps57Vp
kA5kQKvbytjN/E/fWjKYdm7aLhiq0vfglN0gyJ9iNw/DILJZ34OEYeAAtBVZCyHCcY/g0O9vnQMfXKcD
9CLb+Q19GbsRmQ8qdB6MDWIQou6shtxNSQV8i/68oAjKdRg6Z8Gh5MzrWbfOtS4vUpfLvJ3fUNJ8Dsu4
OKqMrlYaGe9LK2Wfxv4Vw7ateGwyy5XaIQxDrsMTpBXLJf/vezA1yM9uQ/ElUHj6mNZUQE7mdYTnl+1u
p2AYkPAX59tkxCs8JHg8j09oeQWTN1dV5dD7NH8JGt4T35LdBeR8KIEb0Yj38QO+X0DnGvlVOY9jmUJk
po7e7xZgTUPh40KtaWKiyIYYpWFxitGwgNj3BmvVNSGBpdCU/o7F26dOJeihpHSaN7LB/jPxXI4mMg38
dz4gZV+ljJWi4b1Oi/ifGUzaMTVMAVE5fysXxdpaj3CWHZ0n0lPcY4c+fGmrI8R7Lb90dY1urCyjJ+ox
EUgXV67wcEs3GV3+7qxEIdkaMZNhHL8Q2RWWR55OGO+U4/FEll2Cdfg4aSiSscLDmjvn8YVgIuidKEHL
ifILeP8itasYuC8saE3yDxO2iTlis4g++fv6F/lVhS0sYHzn5M+tsfm5s4QIMcYNw6wQ2WOH7kizjGG/
kSEvzl8DMhlk2mK8/IZp2LTWGYvmTjVd2vLlxmLltTrE4rAArpI4igP4/bRVLbW8aQn3f9lThTWy7Jj4
ZdP62MPUbOW3dtlWCD/Axw8f4Pn5leNH+PjpU+z2EHwJ9wSLfx3kGlX1uWnyqUPxNqb0Uvd8i/OH4Ivy
Za9BJIG9uj4090nmN8gyP/WVbCLh8x17ufY39zSIKe6fAAAA///Ym8P5XwcAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},
}
